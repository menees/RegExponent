<m:ExtendedWindow x:Class="RegExponent.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:m="http://menees.com/xaml"
		xmlns:local="clr-namespace:RegExponent"
		mc:Ignorable="d"
		Title="RegExponent" Height="450" Width="800"
				   ResizeMode="CanResizeWithGrip" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
				  FocusManager.FocusedElement="{Binding ElementName=pattern}">

	<Window.CommandBindings>
		<CommandBinding Command="local:Commands.Exit" Executed="ExitExecuted" />
		<CommandBinding Command="Help" Executed="HelpExecuted" />
		<CommandBinding Command="local:Commands.About" Executed="AboutExecuted" />
	</Window.CommandBindings>

	<Window.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="PlaceholderTextResources.xaml" />
			</ResourceDictionary.MergedDictionaries>

			<local:Project x:Key="Project"/>
			<BooleanToVisibilityConverter x:Key="BoolToVisibility"/>

			<Style x:Key="ToolbarToggleButton" TargetType="ToggleButton">
				<!-- This style needs an explicit key. Toolbar overrides the styles for ToggleButton, so we have to explicitly pick this style. -->
				<Setter Property="ToolBar.OverflowMode" Value="Never"/>
				<Setter Property="Margin" Value="1,1,1,0"/>
				<Setter Property="MinWidth" Value="20"/>
			</Style>

			<Style TargetType="Paragraph">
				<!-- https://stackoverflow.com/a/445897/1882616 -->
				<Setter Property="Margin" Value="0"/>
			</Style>
		</ResourceDictionary>
	</Window.Resources>

	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="1*" MinHeight="25"/>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="1*" MinHeight="25"/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>

		<DockPanel Grid.Row="0">
			<Menu DockPanel.Dock="Left" VerticalAlignment="Center" Padding="4">
				<!-- Initially this menu was showing with the right edge aligned to the menu item.
				I had to change a Windows setting: Win+R -> shell:::{80F3F1D5-FECA-45F3-BC32-752C152E456E}
				-> Tablet PC Settings -> Other -> Handedness -> Left Handed
				https://stackoverflow.com/a/25109673/1882616 -->
				<MenuItem Header="_File">
					<MenuItem Header="_New" />
					<MenuItem Header="_Open..." />
					<Separator/>
					<MenuItem Header="_Save" />
					<MenuItem Header="Save _As..." />
					<MenuItem Header="A_uto-Save" />
					<Separator/>
					<MenuItem Header="_Recent">
						<MenuItem Header="&lt;None>" IsEnabled="False" />
					</MenuItem>
					<Separator/>
					<MenuItem Header="E_xit" Command="local:Commands.Exit"/>
				</MenuItem>
				<MenuItem Header="_Mode">
					<MenuItem Header="_Match" IsCheckable="True" IsChecked="{Binding InMatchMode, Source={StaticResource Project}}"/>
					<MenuItem Header="_Replace" IsCheckable="True" IsChecked="{Binding InReplaceMode, Source={StaticResource Project}}"/>
					<MenuItem Header="_Split" IsCheckable="True" IsChecked="{Binding InSplitMode, Source={StaticResource Project}}"/>
					<Separator/>
					<MenuItem Header="_Windows Newline: \r\n"/>
					<MenuItem Header="_Unix Newline: \n"/>
					<Separator/>
					<MenuItem Header="_Font..."/>
				</MenuItem>
				<MenuItem Header="_Options">
					<MenuItem Header="Ignore _Case (?i-i)" IsCheckable="True" IsChecked="{Binding UseIgnoreCase, Source={StaticResource Project}}"
							  ToolTip="Use case-insensitive matching."/>
					<MenuItem Header="Multiline (?m-m)" IsCheckable="True" IsChecked="{Binding UseMultiline, Source={StaticResource Project}}"
							  ToolTip="Use multiline mode, where ^ and $ match the beginning and end of each line (instead of the beginning and end of the input string)."/>
					<MenuItem Header="Singleline (?s-s)" IsCheckable="True" IsChecked="{Binding UseSingleline, Source={StaticResource Project}}"
							  ToolTip="Use single-line mode, where the period (.) matches every character (instead of every character except \n)."/>
					<MenuItem Header="Explicit Capture (?n-n)" IsCheckable="True" IsChecked="{Binding UseExplicitCapture, Source={StaticResource Project}}"
							  ToolTip="Do not capture unnamed groups. The only valid captures are explicitly named or numbered groups of the form (?&lt;name> subexpression)."/>
					<MenuItem Header="Ignore Pattern Whitespace (?x-x)" IsCheckable="True" IsChecked="{Binding UseIgnorePatternWhitespace, Source={StaticResource Project}}"
							  ToolTip="Exclude unescaped white space from the pattern, and enable comments after a number sign (#)."/>
					<MenuItem Header="Right To Left" IsCheckable="True" IsChecked="{Binding UseRightToLeft, Source={StaticResource Project}}"
							  ToolTip="Change the search direction. Search moves from right to left instead of from left to right." />
					<MenuItem Header="ECMAScript" IsCheckable="True" IsChecked="{Binding UseECMAScript, Source={StaticResource Project}}"
							  ToolTip="Enable ECMAScript-compliant behavior for the expression."/>
					<MenuItem Header="Culture Invariant" IsCheckable="True" IsChecked="{Binding UseCultureInvariant, Source={StaticResource Project}}"
							  ToolTip="Ignore cultural differences in language."/>
					<Separator/>
					<MenuItem Header="Insert Inline Options"/>
				</MenuItem>
				<MenuItem Header="_Help">
					<MenuItem Header=".NET Regex _Quick Reference..." Command="Help" CommandParameter="https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference"/>
					<MenuItem Header=".NET Regex _Options..." Command="Help" CommandParameter="https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options"/>
					<Separator/>
					<MenuItem Header="_About..." Command="local:Commands.About"/>
				</MenuItem>
			</Menu>

			<ToolBarPanel ClipToBounds="True">
				<ToolBar ToolBarTray.IsLocked="True" Margin="0,0,-13,0" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
					<!-- TODO: ToolBar [Bill, 3/22/2022] -->
					<ToggleButton Content="Match" Style="{StaticResource ToolbarToggleButton}" IsChecked="{Binding InMatchMode, Source={StaticResource Project}}"/>
					<ToggleButton Content="Replace" Style="{StaticResource ToolbarToggleButton}" IsChecked="{Binding InReplaceMode, Source={StaticResource Project}}"/>
					<ToggleButton Content="Split" Style="{StaticResource ToolbarToggleButton}" IsChecked="{Binding InSplitMode, Source={StaticResource Project}}"/>
					<Separator/>
					<ToggleButton Content="i" Style="{StaticResource ToolbarToggleButton}" ToolTip="Ignore Case (?i-i)" IsChecked="{Binding UseIgnoreCase, Source={StaticResource Project}}"/>
					<ToggleButton Content="m" Style="{StaticResource ToolbarToggleButton}" ToolTip="Multiline (?m-m)" IsChecked="{Binding UseMultiline, Source={StaticResource Project}}"/>
					<ToggleButton Content="s" Style="{StaticResource ToolbarToggleButton}" ToolTip="Singleline (?s-s)" IsChecked="{Binding UseSingleline, Source={StaticResource Project}}"/>
					<ToggleButton Content="n" Style="{StaticResource ToolbarToggleButton}" ToolTip="Explicit Capture (?n-n)" IsChecked="{Binding UseExplicitCapture, Source={StaticResource Project}}"/>
					<ToggleButton Content="x" Style="{StaticResource ToolbarToggleButton}" ToolTip="Ignore Pattern Whitespace (?x-x)" IsChecked="{Binding UseIgnorePatternWhitespace, Source={StaticResource Project}}"/>
					<ToggleButton Content="r" Style="{StaticResource ToolbarToggleButton}" ToolTip="Right To Left" IsChecked="{Binding UseRightToLeft, Source={StaticResource Project}}"/>
					<ToggleButton Content="e" Style="{StaticResource ToolbarToggleButton}" ToolTip="ECMAScript" IsChecked="{Binding UseECMAScript, Source={StaticResource Project}}"/>
					<ToggleButton Content="c" Style="{StaticResource ToolbarToggleButton}" ToolTip="Culture Invariant" IsChecked="{Binding UseCultureInvariant, Source={StaticResource Project}}"/>
				</ToolBar>
			</ToolBarPanel>
		</DockPanel>

		<StackPanel Grid.Row="2" Margin="3">
			<!-- TODO: Pattern panel [Bill, 3/22/2022] -->
			<RichTextBox x:Name="pattern" AcceptsReturn="{Binding UseIgnorePatternWhitespace, Source={StaticResource Project}}" Style="{StaticResource PlaceholderTextBox}"
						 local:PlaceholderTextHelper.PlaceholderText="Pattern" MaxHeight="100" VerticalScrollBarVisibility="Auto"/>
		</StackPanel>

		<StackPanel Grid.Row="3" Margin="3"
					Visibility="{Binding InReplaceMode, Source={StaticResource Project}, Converter={StaticResource BoolToVisibility}}">
			<!-- TODO: Replacement panel [Bill, 3/22/2022] -->
			<RichTextBox Style="{StaticResource PlaceholderTextBox}"
						 local:PlaceholderTextHelper.PlaceholderText="Replacement" MaxHeight="100"
						 VerticalScrollBarVisibility="Auto"/>
		</StackPanel>

		<DockPanel Grid.Row="4">
			<!-- TODO: Input panel [Bill, 3/22/2022] -->
			<Label Content="_Input:" DockPanel.Dock="Top" Padding="5,0,5,0"/>
			<RichTextBox Margin="3,3,3,0" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"/>
		</DockPanel>

		<GridSplitter x:Name="splitter" Grid.Row="5" HorizontalAlignment="Stretch" VerticalAlignment="Center" ShowsPreview="True" Height="4" />

		<TabControl x:Name="bottomTabs" Grid.Row="6">
			<TabItem Header="Matches">
				<!-- TODO: Matches tab [Bill, 3/22/2022] -->
				<DataGrid/>
			</TabItem>
			<TabItem Header="Output"
					 Visibility="{Binding InReplaceMode, Converter={StaticResource BoolToVisibility}, Source={StaticResource Project}}"
					 IsVisibleChanged="OutputTabIsVisibleChanged">
				<RichTextBox IsReadOnly="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"
								Visibility="{Binding InReplaceMode, Converter={StaticResource BoolToVisibility}, Source={StaticResource Project}}">
					<RichTextBox.Document>
						<FlowDocument>
							<Paragraph>Show replacement text</Paragraph>
						</FlowDocument>
					</RichTextBox.Document>
				</RichTextBox>
				<!-- TODO: Output tab [Bill, 3/22/2022] -->
			</TabItem>
			<TabItem Header="Output"
					 Visibility="{Binding InSplitMode, Converter={StaticResource BoolToVisibility}, Source={StaticResource Project}}"
					 IsVisibleChanged="OutputTabIsVisibleChanged">
					<DataGrid
							  Visibility="{Binding InSplitMode, Converter={StaticResource BoolToVisibility}, Source={StaticResource Project}}"/>
				<!-- TODO: Output tab [Bill, 3/22/2022] -->
			</TabItem>
		</TabControl>

		<StatusBar Grid.Row="7">
			<!-- TODO: StatusBar [Bill, 3/22/2022] -->
			<StatusBarItem Content="(Untitled)"/>
		</StatusBar>
	</Grid>
</m:ExtendedWindow>
